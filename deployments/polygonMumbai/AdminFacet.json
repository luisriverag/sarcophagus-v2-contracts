{
  "address": "0xdd76D7b1720b8Ee74218a28Eb6D54A52502d637b",
  "abi": [
    {
      "inputs": [],
      "name": "CallerIsNotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSetZeroValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cursedBondPercentage",
          "type": "uint256"
        }
      ],
      "name": "SetCursedBondPercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "embalmerClaimWindow",
          "type": "uint256"
        }
      ],
      "name": "SetEmbalmerClaimWindow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expirationThreshold",
          "type": "uint256"
        }
      ],
      "name": "SetExpirationThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "SetGracePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeeBasePercentage",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFeeBasePercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalProtocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "WithdrawProtocolFees",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBondPercentage",
          "type": "uint256"
        }
      ],
      "name": "setCursedBondPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "embalmerClaimWindow",
          "type": "uint256"
        }
      ],
      "name": "setEmbalmerClaimWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationThreshold",
          "type": "uint256"
        }
      ],
      "name": "setExpirationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setGracePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFeeBasePercentage",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeeBasePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b7fcd450a9977c08df561a1e7df764e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerIsNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cursedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"SetCursedBondPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"embalmerClaimWindow\",\"type\":\"uint256\"}],\"name\":\"SetEmbalmerClaimWindow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationThreshold\",\"type\":\"uint256\"}],\"name\":\"SetExpirationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"}],\"name\":\"SetGracePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeBasePercentage\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFeeBasePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalProtocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"WithdrawProtocolFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"setCursedBondPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"embalmerClaimWindow\",\"type\":\"uint256\"}],\"name\":\"setEmbalmerClaimWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationThreshold\",\"type\":\"uint256\"}],\"name\":\"setExpirationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeeBasePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeBasePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setCursedBondPercentage(uint256)\":{\"params\":{\"cursedBondPercentage\":\"ratio to set.\"}},\"setEmbalmerClaimWindow(uint256)\":{\"params\":{\"embalmerClaimWindow\":\"to set\"}},\"setExpirationThreshold(uint256)\":{\"params\":{\"expirationThreshold\":\"to set\"}},\"setGracePeriod(uint256)\":{\"params\":{\"gracePeriod\":\"to set\"}},\"setProtocolFeeBasePercentage(uint256)\":{\"params\":{\"protocolFeeBasePercentage\":\"percentage to set\"}},\"transferAdmin(address)\":{\"params\":{\"newAdmin\":\"to set\"}},\"withdrawProtocolFees(address)\":{\"params\":{\"withdrawalAddress\":\"- the address to withdraw funds to\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerIsNotAdmin()\":[{\"notice\":\"Caller must be the admin address\"}],\"CannotSetZeroValue()\":[{\"notice\":\"Admin has attempted to set a zero value\"}],\"ZeroAddress()\":[{\"notice\":\"Provided address cannot be zero address\"}]},\"kind\":\"user\",\"methods\":{\"setCursedBondPercentage(uint256)\":{\"notice\":\"Sets the digging fee / cursed bond ratioThe denominator is 10000 used to calculate how much bond archaeologists must lock per curse.\"},\"setEmbalmerClaimWindow(uint256)\":{\"notice\":\"Updates the embalmerClaimWindowDenominated in seconds\"},\"setExpirationThreshold(uint256)\":{\"notice\":\"Updates the expirationThreshold used during sarcophagus creationDenominated in seconds\"},\"setGracePeriod(uint256)\":{\"notice\":\"Updates the resurrection grace periodDenominated in seconds\"},\"setProtocolFeeBasePercentage(uint256)\":{\"notice\":\"Sets the protocol fee base percentage, used to calculate protocol feesThe denominator is 10000\"},\"transferAdmin(address)\":{\"notice\":\"Transfers admin address to newAdmin.\"},\"withdrawProtocolFees(address)\":{\"notice\":\"Withdraws the total protocol fee amount from the contract to the specified address\"}},\"notice\":\"Caller of any function in this facet must be the admin address\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/AdminFacet.sol\":\"AdminFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/facets/AdminFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"../storage/LibAppStorage.sol\\\";\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\n/// @notice Caller of any function in this facet must be the admin address\\r\\ncontract AdminFacet {\\r\\n    event SetProtocolFeeBasePercentage(uint256 protocolFeeBasePercentage);\\r\\n    event SetCursedBondPercentage(uint256 cursedBondPercentage);\\r\\n    event WithdrawProtocolFees(uint256 totalProtocolFees, address withdrawalAddress);\\r\\n    event SetGracePeriod(uint256 gracePeriod);\\r\\n    event SetEmbalmerClaimWindow(uint256 embalmerClaimWindow);\\r\\n    event SetExpirationThreshold(uint256 expirationThreshold);\\r\\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\\r\\n\\r\\n    /// @notice Admin has attempted to set a zero value\\r\\n    error CannotSetZeroValue();\\r\\n\\r\\n    /// @notice Caller must be the admin address\\r\\n    error CallerIsNotAdmin();\\r\\n\\r\\n    /// @notice Provided address cannot be zero address\\r\\n    error ZeroAddress();\\r\\n\\r\\n    modifier onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        if (msg.sender != s.admin) {\\r\\n            revert CallerIsNotAdmin();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws the total protocol fee amount from the contract to the specified address\\r\\n    /// @param withdrawalAddress - the address to withdraw funds to\\r\\n    function withdrawProtocolFees(address withdrawalAddress) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        // Get the total protocol fees from storage\\r\\n        uint256 totalProtocolFees = s.totalProtocolFees;\\r\\n        // Set the total protocol fees to 0 before the transfer to avoid reentrancy\\r\\n        s.totalProtocolFees = 0;\\r\\n        // Transfer the protocol fee amount to the sender after setting state\\r\\n        s.sarcoToken.transfer(withdrawalAddress, totalProtocolFees);\\r\\n        emit WithdrawProtocolFees(totalProtocolFees, withdrawalAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the protocol fee base percentage, used to calculate protocol fees\\r\\n    /// @notice The denominator is 10000\\r\\n    /// @param protocolFeeBasePercentage percentage to set\\r\\n    function setProtocolFeeBasePercentage(uint256 protocolFeeBasePercentage) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        s.protocolFeeBasePercentage = protocolFeeBasePercentage;\\r\\n        emit SetProtocolFeeBasePercentage(protocolFeeBasePercentage);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the digging fee / cursed bond ratio\\r\\n    /// @notice The denominator is 10000\\r\\n    /// used to calculate how much bond archaeologists must lock per curse.\\r\\n    /// @param cursedBondPercentage ratio to set.\\r\\n    function setCursedBondPercentage(uint256 cursedBondPercentage) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        if (cursedBondPercentage == 0) {\\r\\n            revert CannotSetZeroValue();\\r\\n        }\\r\\n        s.cursedBondPercentage = cursedBondPercentage;\\r\\n        emit SetCursedBondPercentage(cursedBondPercentage);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the resurrection grace period\\r\\n    /// @notice Denominated in seconds\\r\\n    /// @param gracePeriod to set\\r\\n    function setGracePeriod(uint256 gracePeriod) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        s.gracePeriod = gracePeriod;\\r\\n        emit SetGracePeriod(gracePeriod);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the embalmerClaimWindow\\r\\n    /// @notice Denominated in seconds\\r\\n    /// @param embalmerClaimWindow to set\\r\\n    function setEmbalmerClaimWindow(uint256 embalmerClaimWindow) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        s.embalmerClaimWindow = embalmerClaimWindow;\\r\\n        emit SetEmbalmerClaimWindow(embalmerClaimWindow);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the expirationThreshold used during sarcophagus creation\\r\\n    /// @notice Denominated in seconds\\r\\n    /// @param expirationThreshold to set\\r\\n    function setExpirationThreshold(uint256 expirationThreshold) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        s.expirationThreshold = expirationThreshold;\\r\\n        emit SetExpirationThreshold(expirationThreshold);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers admin address to newAdmin.\\r\\n    /// @param newAdmin to set\\r\\n    function transferAdmin(address newAdmin) external onlyAdmin {\\r\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\r\\n        if (newAdmin == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        s.admin = newAdmin;\\r\\n        emit AdminTransferred(msg.sender, newAdmin);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73025f904f1e1ec022d4660b4420cc12a4712cac0f2d1dde85e424004b9f0a57\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @title Types shared across facets for the Sarcophagus diamond\\r\\n */\\r\\nlibrary LibTypes {\\r\\n    struct Sarcophagus {\\r\\n        // Also used for existence checks -- does not exist if 0\\r\\n        uint256 resurrectionTime;\\r\\n        uint256 previousRewrapTime;\\r\\n        // todo: run gas cost evaluation on storing isCompromised vs looping through stored archaeologists and checking isAccused\\r\\n        bool isCompromised;\\r\\n        bool isCleaned;\\r\\n        bool isRewrapped;\\r\\n        uint8 threshold;\\r\\n        string name;\\r\\n        uint256 maximumRewrapInterval;\\r\\n        uint256 maximumResurrectionTime;\\r\\n        string arweaveTxId;\\r\\n        address embalmerAddress;\\r\\n        address recipientAddress;\\r\\n        address[] cursedArchaeologistAddresses;\\r\\n        mapping(address => CursedArchaeologist) cursedArchaeologists;\\r\\n        uint256 cursedBondPercentage;\\r\\n    }\\r\\n\\r\\n    struct CursedArchaeologist {\\r\\n        uint256 diggingFeePerSecond;\\r\\n        // Also used for publish checks -- has not published if 0\\r\\n        bytes32 privateKey;\\r\\n        // Also used for curse checks -- is not bonded if length is 0\\r\\n        bytes publicKey;\\r\\n        bool isAccused;\\r\\n        uint256 curseFee;\\r\\n    }\\r\\n\\r\\n    struct Signature {\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    struct ArchaeologistProfile {\\r\\n        // Also used for existence checks -- does not exist if 0\\r\\n        uint256 maximumRewrapInterval;\\r\\n        uint256 maximumResurrectionTime;\\r\\n        string peerId;\\r\\n        uint256 minimumDiggingFeePerSecond;\\r\\n        uint256 freeBond;\\r\\n        uint256 cursedBond;\\r\\n        uint256 curseFee;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x096d9660852c5179b16d71abe3a818282db9e980fdc431efa77bd92577d60fb8\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../libraries/LibTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * Global diamond storage struct to be shared across facets\\r\\n * TODO: Implement diamond storage pattern and consider splitting storage into facet specific structs\\r\\n */\\r\\nstruct AppStorage {\\r\\n    // SARCO token contract\\r\\n    IERC20 sarcoToken;\\r\\n    // The Admin address allowed to call Admin Facet functions\\r\\n    address admin;\\r\\n    // total protocol fees available to be withdrawn by the admin\\r\\n    uint256 totalProtocolFees;\\r\\n    /**\\r\\n     * Protocol level admin configurations\\r\\n     */\\r\\n    // % of total digging fees for sarcophagus to charge embalmer on create and rewrap. Denominator is 10000\\r\\n    uint256 protocolFeeBasePercentage;\\r\\n    // % of digging fees archaeologists must have locked up per curse in cursed bond. Denominator is 10000\\r\\n    uint256 cursedBondPercentage;\\r\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time. Specified in seconds\\r\\n    uint256 gracePeriod;\\r\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated. Specified in seconds\\r\\n    uint256 expirationThreshold;\\r\\n    // window after end of gracePeriod + resurrectionTime where embalmer can claim remaining bonds from archaeologists that have failed to publish private keys. Specified in seconds\\r\\n    uint256 embalmerClaimWindow;\\r\\n    // registered archaeologist addresses\\r\\n    address[] archaeologistProfileAddresses;\\r\\n    // public key => archaeologist address\\r\\n    mapping(bytes => address) publicKeyToArchaeologistAddress;\\r\\n    // sarcophagus id => sarcophagus object\\r\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\r\\n    // archaeologist address => profile\\r\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\r\\n    // current balance of rewards available for the archaeologist to withdraw\\r\\n    mapping(address => uint256) archaeologistRewards;\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"sarcophagus.storage.1\\\");\\r\\n\\r\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x66f7100a037fcc417379e68914a8831d867f3701c39419f8f04a3af27008438c\",\"license\":\"Unlicense\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b83806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806375829def1161005b57806375829def146100d65780638a5b5690146100f2578063a828c4791461010e578063f2f659601461012a5761007d565b8063274f255e146100825780632d80caa51461009e5780636430ae6a146100ba575b600080fd5b61009c600480360381019061009791906109a5565b610146565b005b6100b860048036038101906100b39190610a30565b61022c565b005b6100d460048036038101906100cf91906109a5565b6103c2565b005b6100f060048036038101906100eb9190610a30565b6104e2565b005b61010c600480360381019061010791906109a5565b61068b565b005b610128600480360381019061012391906109a5565b610771565b005b610144600480360381019061013f91906109a5565b610857565b005b600061015061093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101db576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101e561093d565b90508281600701819055507f3d58bff47ca074037a5dcd57740255670d45843115cca9c9bc442eb6d3f0ad788360405161021f9190610a6c565b60405180910390a1505050565b600061023661093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c1576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102cb61093d565b9050600081600201549050600082600201819055508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b815260040161033f929190610a96565b6020604051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610af7565b507f7baf2b6a1777e2a34a2dcddad43c098eb5ab5b5c7a1f3c8ec4872863265244f481856040516103b4929190610b24565b60405180910390a150505050565b60006103cc61093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610457576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061046161093d565b90506000830361049d576040517f4a8fadb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281600401819055507f4aeca9f26d25b33ee1b2c061ab4a849de97bfb592e7dfb276c9ded12d0ad56a2836040516104d59190610a6c565b60405180910390a1505050565b60006104ec61093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610577576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061058161093d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105e9576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a3505050565b600061069561093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610720576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061072a61093d565b90508281600301819055507f4768bb3a79cb8de7ec3c4c950f9f76fbe4588407c214998efbf648001c858e9b836040516107649190610a6c565b60405180910390a1505050565b600061077b61093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610806576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061081061093d565b90508281600601819055507f047ca17cdae34ccbd8db62138d05e11962458ffd86009620909ba6ad606282ad8360405161084a9190610a6c565b60405180910390a1505050565b600061086161093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ec576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108f661093d565b90508281600501819055507f848ba7852320e491d84ddc22f1f12fe48672aa22757fc4452703c9046d9982d7836040516109309190610a6c565b60405180910390a1505050565b6000807ff20877bf9d9fb9260326061ac66e420582d0e2a7736ab6a6c3afd0604e1902dd90508091505090565b600080fd5b6000819050919050565b6109828161096f565b811461098d57600080fd5b50565b60008135905061099f81610979565b92915050565b6000602082840312156109bb576109ba61096a565b5b60006109c984828501610990565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109fd826109d2565b9050919050565b610a0d816109f2565b8114610a1857600080fd5b50565b600081359050610a2a81610a04565b92915050565b600060208284031215610a4657610a4561096a565b5b6000610a5484828501610a1b565b91505092915050565b610a668161096f565b82525050565b6000602082019050610a816000830184610a5d565b92915050565b610a90816109f2565b82525050565b6000604082019050610aab6000830185610a87565b610ab86020830184610a5d565b9392505050565b60008115159050919050565b610ad481610abf565b8114610adf57600080fd5b50565b600081519050610af181610acb565b92915050565b600060208284031215610b0d57610b0c61096a565b5b6000610b1b84828501610ae2565b91505092915050565b6000604082019050610b396000830185610a5d565b610b466020830184610a87565b939250505056fea26469706673582212202b99df4126e7262fe4189b447cf266da561a651ce3160af63019994b2c9565ac64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806375829def1161005b57806375829def146100d65780638a5b5690146100f2578063a828c4791461010e578063f2f659601461012a5761007d565b8063274f255e146100825780632d80caa51461009e5780636430ae6a146100ba575b600080fd5b61009c600480360381019061009791906109a5565b610146565b005b6100b860048036038101906100b39190610a30565b61022c565b005b6100d460048036038101906100cf91906109a5565b6103c2565b005b6100f060048036038101906100eb9190610a30565b6104e2565b005b61010c600480360381019061010791906109a5565b61068b565b005b610128600480360381019061012391906109a5565b610771565b005b610144600480360381019061013f91906109a5565b610857565b005b600061015061093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101db576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101e561093d565b90508281600701819055507f3d58bff47ca074037a5dcd57740255670d45843115cca9c9bc442eb6d3f0ad788360405161021f9190610a6c565b60405180910390a1505050565b600061023661093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c1576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102cb61093d565b9050600081600201549050600082600201819055508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b815260040161033f929190610a96565b6020604051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610af7565b507f7baf2b6a1777e2a34a2dcddad43c098eb5ab5b5c7a1f3c8ec4872863265244f481856040516103b4929190610b24565b60405180910390a150505050565b60006103cc61093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610457576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061046161093d565b90506000830361049d576040517f4a8fadb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281600401819055507f4aeca9f26d25b33ee1b2c061ab4a849de97bfb592e7dfb276c9ded12d0ad56a2836040516104d59190610a6c565b60405180910390a1505050565b60006104ec61093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610577576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061058161093d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105e9576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a3505050565b600061069561093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610720576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061072a61093d565b90508281600301819055507f4768bb3a79cb8de7ec3c4c950f9f76fbe4588407c214998efbf648001c858e9b836040516107649190610a6c565b60405180910390a1505050565b600061077b61093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610806576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061081061093d565b90508281600601819055507f047ca17cdae34ccbd8db62138d05e11962458ffd86009620909ba6ad606282ad8360405161084a9190610a6c565b60405180910390a1505050565b600061086161093d565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ec576040517f8dfa73db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108f661093d565b90508281600501819055507f848ba7852320e491d84ddc22f1f12fe48672aa22757fc4452703c9046d9982d7836040516109309190610a6c565b60405180910390a1505050565b6000807ff20877bf9d9fb9260326061ac66e420582d0e2a7736ab6a6c3afd0604e1902dd90508091505090565b600080fd5b6000819050919050565b6109828161096f565b811461098d57600080fd5b50565b60008135905061099f81610979565b92915050565b6000602082840312156109bb576109ba61096a565b5b60006109c984828501610990565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109fd826109d2565b9050919050565b610a0d816109f2565b8114610a1857600080fd5b50565b600081359050610a2a81610a04565b92915050565b600060208284031215610a4657610a4561096a565b5b6000610a5484828501610a1b565b91505092915050565b610a668161096f565b82525050565b6000602082019050610a816000830184610a5d565b92915050565b610a90816109f2565b82525050565b6000604082019050610aab6000830185610a87565b610ab86020830184610a5d565b9392505050565b60008115159050919050565b610ad481610abf565b8114610adf57600080fd5b50565b600081519050610af181610acb565b92915050565b600060208284031215610b0d57610b0c61096a565b5b6000610b1b84828501610ae2565b91505092915050565b6000604082019050610b396000830185610a5d565b610b466020830184610a87565b939250505056fea26469706673582212202b99df4126e7262fe4189b447cf266da561a651ce3160af63019994b2c9565ac64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setCursedBondPercentage(uint256)": {
        "params": {
          "cursedBondPercentage": "ratio to set."
        }
      },
      "setEmbalmerClaimWindow(uint256)": {
        "params": {
          "embalmerClaimWindow": "to set"
        }
      },
      "setExpirationThreshold(uint256)": {
        "params": {
          "expirationThreshold": "to set"
        }
      },
      "setGracePeriod(uint256)": {
        "params": {
          "gracePeriod": "to set"
        }
      },
      "setProtocolFeeBasePercentage(uint256)": {
        "params": {
          "protocolFeeBasePercentage": "percentage to set"
        }
      },
      "transferAdmin(address)": {
        "params": {
          "newAdmin": "to set"
        }
      },
      "withdrawProtocolFees(address)": {
        "params": {
          "withdrawalAddress": "- the address to withdraw funds to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerIsNotAdmin()": [
        {
          "notice": "Caller must be the admin address"
        }
      ],
      "CannotSetZeroValue()": [
        {
          "notice": "Admin has attempted to set a zero value"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Provided address cannot be zero address"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "setCursedBondPercentage(uint256)": {
        "notice": "Sets the digging fee / cursed bond ratioThe denominator is 10000 used to calculate how much bond archaeologists must lock per curse."
      },
      "setEmbalmerClaimWindow(uint256)": {
        "notice": "Updates the embalmerClaimWindowDenominated in seconds"
      },
      "setExpirationThreshold(uint256)": {
        "notice": "Updates the expirationThreshold used during sarcophagus creationDenominated in seconds"
      },
      "setGracePeriod(uint256)": {
        "notice": "Updates the resurrection grace periodDenominated in seconds"
      },
      "setProtocolFeeBasePercentage(uint256)": {
        "notice": "Sets the protocol fee base percentage, used to calculate protocol feesThe denominator is 10000"
      },
      "transferAdmin(address)": {
        "notice": "Transfers admin address to newAdmin."
      },
      "withdrawProtocolFees(address)": {
        "notice": "Withdraws the total protocol fee amount from the contract to the specified address"
      }
    },
    "notice": "Caller of any function in this facet must be the admin address",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}